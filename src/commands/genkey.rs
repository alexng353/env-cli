use super::*;
use crate::utils::encryption;
use crate::utils::prompt::{prompt_email, prompt_password, prompt_text};
use anyhow::Context;

/// Encrypt a string using GPG
#[derive(Parser)]
pub struct Args {
    /// Interactive mode
    #[clap(short, long)]
    interactive: bool,

    /// Your real name
    #[clap(short, long)]
    name: Option<String>,

    /// Your email address
    #[clap(short, long)]
    email: Option<String>,

    /// Passphrase to encrypt the key with
    #[clap(short, long)]
    passphrase: Option<String>,

    /// force overwrite of existing key
    #[clap(long = "force", short = 'f')]
    force_overwrite: bool,

    /// Generate another key
    #[clap(long = "new-key", short = 'n')]
    force_generate_new_key: bool,
}

fn email_validator(email: &str) -> anyhow::Result<(), anyhow::Error> {
    let regex = regex::Regex::new(r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$")
        .context("Failed to create regex for email validation")?;
    if regex.is_match(email) {
        Ok(())
    } else {
        Err(anyhow::Error::msg("Please enter a valid email address"))
    }
}

pub async fn command(args: Args, _json: bool) -> Result<()> {
    let mut number: i32 = 0;

    match encryption::gpg_list_keys().await {
        Ok(keys) => {
            if !args.force_overwrite && !args.force_generate_new_key && !keys.is_empty() {
                eprintln!("{} keys already exist generated by env-cli", keys.len());
                for key in keys.clone() {
                    eprintln!("{}", key.red());
                }
                if keys.len() > 1 {
                    eprintln!("Use {} to generate another key.", "--new-key".red());
                    eprintln!(
                        "Use {} to overwrite. {}",
                        "--force".red(),
                        "THIS WILL DELETE ALL YOUR KEYS".red().bold()
                    );
                }
                eprintln!("Use {} to overwrite.", "--force".red());
                std::process::exit(1);
            } else if args.force_overwrite {
                unimplemented!("force overwrite not implemented yet")
            } else if args.force_generate_new_key {
                number = keys.len() as i32;
            }
        }
        Err(_) => {}
    }

    let name = args
        .name
        .unwrap_or_else(|| prompt_text("What is your name?").unwrap());
    let email = args.email.unwrap_or_else(|| prompt_email("email").unwrap());

    match email_validator(&email) {
        Ok(_) => {}
        Err(e) => {
            eprintln!("{}", e);
            std::process::exit(1);
        }
    }

    let passphrase = args
        .passphrase
        .unwrap_or_else(|| prompt_password("password").unwrap());

    encryption::gpg_generate_key(&name, &email, &passphrase, &number).await?;

    Ok(())
}
